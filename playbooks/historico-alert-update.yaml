---
- hosts: cluster
  gather_facts: false
  vars:
    desired_port: "{{ cluster_node_port }}"
    yearweek: "{{ yearweek }}"
    disease: "{{ disease }}"
    db_user: "{{ psql_user }}"
    db_name: "{{ psql_db }}"
    db_password: "{{ psql_passwd }}"
    HOST_SOURCE_DIR: /tmp/sql
    REMOTE_TARGET_DIR: /tmp/sql
    SCRIPT_DIR: ../ansible/roles/historico-alertas-update/scripts/sql
    SQL_FNAME: "update_hist_alerta_{{ yearweek }}_{{ disease }}.sql"
    LOG_PATH: /var/log/ansible

  tasks:
    - name: Check if ssh is running on {{ desired_port }}
      delegate_to: localhost
      wait_for:
        port: "{{ desired_port }}"
        host: "{{ ansible_host }}"
        timeout: 10
      ignore_errors: true
      register: desired_port_check

    - name: Configure ansible to use port {{ desired_port }}
      set_fact:
        ansible_port: "{{ desired_port }}"

    - file:
        path: "{{ HOST_SOURCE_DIR }}"
        state: directory
        mode: 0755

    - command: cp "{{ item }}" {{ HOST_SOURCE_DIR }}/{{ SQL_FNAME }}
      with_fileglob:
        - "{{ SCRIPT_DIR }}/*.sql"
      delegate_to: localhost

    - name: Copy script to server
      copy:
        src: "{{ HOST_SOURCE_DIR }}/{{ SQL_FNAME }}"
        dest: "{{ REMOTE_TARGET_DIR }}/{{ SQL_FNAME }}"
        owner: "{{ cluster_user_name }}"
        group: "{{ cluster_user_name }}"
        mode: "0644"

    - name: Add data to database
      become: true
      become_user: postgres
      shell: PGPASSWORD={{ psql_passwd }} psql -h {{ psql_host }} \
                  -p {{ psql_port }} \
                  -U {{ psql_user }} \
                  -d {{ db_name }} -f {{ REMOTE_TARGET_DIR }}/{{ SQL_FNAME }}

    - name: Log the SQL script execution
      shell: echo "{{ lookup('pipe','date') }} ==> SQL script {{ SQL_FNAME }} executed successfully" >> "{{ LOG_PATH }}/historico_alertas_update.log"
